drop table if exists addresses, users, comments, places, services, schedulerDaysOfWeek, schedules;
drop type if exists roleType, serviceType, dayOfWeekType;

create type roleType as ENUM(
    'ADMIN', 'CUSTOMER', 'MANAGER'
);

create type serviceType as ENUM(
    'WI-FI', 'POOL', 'TV', 'BAR', 'SHOWER', 'TRANSFER', 'BREAKFAST', 'FITNESS', 'PARKING',
    'ANIMALS', 'ALL'
);

create type dayOfWeekType as ENUM(
    'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'
);

create table addresses (address_id int4 generated by default as identity, city varchar(255), country varchar(255), house_number varchar(255), street varchar(255), primary key (address_id))
create table roles (role_id int4 generated by default as identity, role varchar(255), primary key (role_id))
create table users (user_id int4 generated by default as identity, activated boolean not null, email varchar(255), name varchar(255), password varchar(255), phone varchar(255), surname varchar(255), username varchar(255), address_id int4, role_id int4, primary key (user_id))

alter table if exists users add constraint FKe8vydtk7hf0y16bfm558sywbb foreign key (address_id) references addresses
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles

create table if not exists comments (
    commentId int generated always as identity,
    userId int not null,
    comment varchar not null,
    primary key (commentId),
    constraint fkUser
      foreign key (userId)
      references users(userId)
);

create table if not exists places (
    placeId int generated always as identity,
    addressId int not null,
    userId int not null,
    placeName varchar not null,
    description varchar not null,
    commentId int not null,
    primary key (placeId),
    constraint fkAddress
      foreign key (addressId)
      references addresses(addressId),
    constraint fkUser
      foreign key (userId)
      references users(userId),
    constraint fkComment
      foreign key (commentId)
      references comments(commentId)
);

create table if not exists services (
    serviceId int generated always as identity,
    service serviceType not null,
    placeId int not null,
    primary key (serviceId),
    constraint fkPlaces
      foreign key (placeId)
      references places(placeId)
);

create table if not exists schedulerDaysOfWeek (
    schedulerDaysOfWeekId int generated always as identity,
    dayOfWeek dayOfWeekType not null,
    workStart time not null,
    workStop time not null,
    price money not null,
    primary key (schedulerDaysOfWeekId)
);

create table if not exists schedules (
    scheduleId int generated always as identity,
    schedulerDaysOfWeekId int not null,
    placeId int not null,
    primary key (scheduleId),
    constraint fkPlaces
      foreign key (placeId)
      references places(placeId),
    constraint fkSchedulerDaysOfWeek
      foreign key (schedulerDaysOfWeekId)
      references schedulerDaysOfWeek(schedulerDaysOfWeekId)
);

